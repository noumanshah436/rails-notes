https://www.tutorialspoint.com/rspec/

********************

https://stackoverflow.com/questions/10173097/rails-rspec-difference-between-let-and-let
https://mixandgo.com/learn/ruby/let-vs-let!


let vs let!

basically (:let) is lazily evaluated and will never be instantiated if you don't call it, while (:let!) is forcefully evaluated before each method call.

let allows you to declare variables to test.

let block is evaluated for test block only when we call it and it use the same instance for one test block
let is lazy-evaluated: it is not evaluated until the first time the method it defines is invoked.
Lazy evaluation means the let block runs only if and when it is referenced



Use let! to force the method’s invocation before each example.
You can use let! to force the method's invocation before each example. It means even if you didn't invoke the helper method inside the example, still it will be invoked before your example runs.

********************


subject is the thing under test. With RSpec, it will usually be an instance of the object/class you are testing.

Subject allows you to declare a test subject, and then reuse it for any number of following test cases afterward.
This reduces code repetition (DRYing up your code)

********************

Let is an alternative to before: each blocks, which assign test data to instance variables. Let gives you a couple of advantages. First, it caches the value without assigning it to an instance variable. Second, it is lazily evaluated, which means that it doesn't get evaluated until a spec calls for it. Thus let helps you speed up your tests. I also think let is easier to read


***********************************************************


# Capybara, the library that allows us to interact with the browser using Ruby
  gem 'capybara'


***********************************************************
describe vs context:


There is not much difference between describe and context. The difference lies in readability.
  I use describe to separate methods being tested or behavior being tested.
  I tend to use context when I want to separate specs based on conditions.

describe and context both can accept a class name and/or string argument

One main thing that changed in the latest RSpec is that "context" can no longer be used as a top-level method.

**********

describe:
  It is used to define an “Example Group”. You can think of an “Example Group” as a collection of tests.
  describe is used as a top-level method.

context:
  The idea of context is that it encloses tests of a certain type.
  "context" can no longer be used as a top-level method.

***********************************************************

By running your Rails tests you can ensure your code adheres to the desired functionality even after some major code refactoring.
Rails tests can also simulate browser requests and thus you can test your application's response without having to test it through your browser.

- functioning properly
- code working after change
- not need to test requests on browser

***********************************************************


So the up-to-date list is really the following.

Model specs
System specs
Request specs
Helper specs
View specs
Routing specs
Mailer specs
Job specs


******************************************
RSpec and Manifest main difference:

1) focuses on readable specifications describing how the application is supposed to behave with a close match to English.


Client-side
rspec allows testing code execution on the client, such as a web browser
RSpec is used to primarily test the behaviour of applications or individual components so it can test front-end behaviour as well - you can use capybara gem with RSpec for that.



**********************



Let vs Let!
Life Cycle of object creation
Faker
Factory Bot
Stumming and Honking
Shared Example and Shared Context
Describe, it and context
Conventions of test cases
Expect instance variables in controllers (For Testing of controllers)
Expect of authentication and authorizations
