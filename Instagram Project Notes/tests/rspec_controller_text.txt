https://relishapp.com/rspec/rspec-rails/docs/controller-specs

gem docs
https://github.com/rails/rails-controller-testing#rspec

1) rails g rspec:controller posts
  and change name To:
  RSpec.describe PostsController, type: :controller  do

2) add gem to development test group:
  gem 'rails-controller-testing'
  bundle

3) add in rails helper to enable sign in:
config.include Devise::Test::ControllerHelpers, type: :controller


***********************************


require 'rails_helper'

RSpec.describe PostsController, type: :controller do
  let(:user) { create :user }
  let(:postt) { create :post }
  let(:param) do
    { post: { title: "Pakistan vs South Africa",
              text: "The senior players will be rested for the upcoming series against West Indies, revealed a friend of mine who is in a position to say these things conclusively", image: Rack::Test::UploadedFile.new('/home/dev/Downloads/cover.jpg', 'image/jpg'), user_id: user.id } }
  end

  describe 'when user enter any unknown id for show edit update' do
    it 'post not exist' do
      sign_in(user)
      get :show, params: { id: "1234567" }
      expect(flash[:alert]).to eq("Post doesn't exist!")
      expect(response).to redirect_to root_path
    end
  end

  it 'GET index' do
    sign_in(user)
    get :index
    expect(response).to render_template :index
  end

  describe 'GET dashboard' do
    it 'when user login' do
      sign_in(user)
      get :dashboard
      expect(response).to render_template :dashboard
    end
    it 'when admin login' do
      user.role = "admin"
      user.save
      sign_in(user)
      get :dashboard
      expect(response).to render_template :dashboard
    end
    it 'when moderator login' do
      user.role = "moderator"
      user.save
      sign_in(user)
      get :dashboard
      expect(response).to redirect_to moderators_path
    end
  end

  describe 'GET show' do
    it 'when moderator login' do
      user.role = "moderator"
      user.save
      sign_in(user)
      get :show, params: { id: postt.id }
      expect(response).to render_template :show
    end
    it 'when user login and post unpublish' do
      sign_in(user)
      get :show, params: { id: postt.id }
      expect(flash[:alert]).to eq("Post Will be Verified by Moderator")
      expect(response).to redirect_to dashboard_posts_path
    end
    it 'when user login and post publish' do
      sign_in(user)
      postt.publish = true
      postt.save
      get :show, params: { id: postt.id }
      expect(response).to render_template :show
    end
  end

  it 'GET new' do
    sign_in(user)
    get :new
    expect(response).to render_template :new
  end

  describe 'GET edit' do
    it 'when unautorized user try to edit post' do
      sign_in(user)
      get :edit, params: { id: postt.id }
      expect(response).to redirect_to root_path
    end
    it 'when autorized user try to edit post' do
      user = User.find(postt.user_id)
      sign_in(user)
      get :edit, params: { id: postt.id }
      expect(response).to render_template :edit
    end
  end

  describe 'PUT update' do
    context 'when autorized user try to update post' do
      it 'with valid attributes' do
        user = User.find(postt.user_id)
        sign_in(user)
        put :update, params: { id: postt.id, post: { title: 'PAKISTAN VS SRILANKA' } }
        postt.reload
        expect(postt.title).to be == 'PAKISTAN VS SRILANKA'
        expect(flash[:notice]).to eq("Post was successfully updated.")
        expect(response).to redirect_to("/posts/#{assigns(:post).id}")
      end
      it 'with invalid attributes' do
        user = User.find(postt.user_id)
        sign_in(user)
        put :update, params: { id: postt.id, post: { title: 'PAKISTAN' } }
        postt.reload
        expect(postt.title).not_to be == 'PAKISTAN'
        expect(response).to render_template :edit
      end
    end
    context 'when unautorized user try to update post' do
      it 'of someone else' do
        sign_in(user)
        put :update, params: { id: postt.id, post: { title: 'PAKISTAN VS SRILANKA' } }
        postt.reload
        expect(postt.title).not_to be == 'PAKISTAN VS SRILANKA'
      end
    end
  end

  describe 'POST create' do
    it 'with valid attributes' do
      sign_in(user)
      before_count = Post.count
      post :create, params: param
      expect(Post.count).not_to eq(before_count)
      expect(flash[:notice]).to eq("Post was successfully created")
    end
    it 'with invalid attributes' do
      sign_in(user)
      before_count = Post.count
      param[:post][:title] = 'Invalid'
      post :create, params: param
      expect(Post.count).to eq(before_count)
      expect(response).to render_template :new
    end
  end

  describe 'PUT like' do
    it 'post liked' do
      sign_in(user)
      put :like, params: { id: postt.id }, xhr: true
    end
    it 'post disliked' do
      sign_in(user)
      postt.likes.create(user_id: user.id)
      put :like, params: { id: postt.id }, xhr: true
    end
  end

  describe 'PUT report' do
    it 'post report' do
      sign_in(user)
      put :report, params: { id: postt.id }, xhr: true
    end
    it 'post unreport' do
      sign_in(user)
      postt.reports.create(user_id: user.id)
      put :report, params: { id: postt.id }, xhr: true
    end
  end
end


*********************


Parameters: {

  "utf8"=>"âœ“",
  "authenticity_token"=>"yS1XSeg5EnELTF1naIpel1qXe8Oj/Dv+8UZJqy/UWWQwsvZCztyMSUZhoER5Gv7KEIDGgHlXv6zIutTRMrXDHQ==",
  "post"=>{"content"=>"hey", "active"=>"1"},
  "commit"=>"Post",
  "images"=>{"0"=>#<ActionDispatch::Http::UploadedFile:0x00007f1a84429758 @tempfile=#<Tempfile:/tmp/RackMultipart20221005-341606-1lv4vdl.png>, @original_filename="Screenshot from 2022-08-18 11-19-48.png", @content_type="image/png", @headers="Content-Disposition: form-data; name=\"images[0]\"; filename=\"Screenshot from 2022-08-18 11-19-48.png\"\r\nContent-Type: image/png\r\n">}}


********************

it 'with valid attributes' do
      sign_in(account)
      before_count = Post.count
      post :create, params: { post: { content: "post content" },
      images: { "0": File.open("#{Rails.root}/app/assets/images/default2.png")  }
      }

      expect(Post.count).not_to eq(before_count)
      expect(flash[:notice]).to eq("Post Created")
    end

********************
********************
********************
********************
